Vagrant.configure("2") do |config|
	config.vm.box = "dummy"

	config.vm.define :usuarios do |usuarios|
 		usuarios.vm.host_name = "usuarios"

  		config.vm.provider :aws do |aws, override|
			aws.access_key_id = ENV['AWS_ACCESS_KEY_ID']
			aws.secret_access_key = ENV['AWS_SECRET_ACCESS_KEY']
			aws.region = "us-east-1"

			# AMI from which we'll launch EC2 Instance
			aws.ami =  "ami-efe09bf8" # Ubuntu 16.04.1
			aws.keypair_name = ENV['AWS_KEY_PAIR_NAME']
			aws.instance_type = "t2.micro"
			aws.security_groups = ENV['AWS_SECURITY_GROUP_NAME']
			aws.tags = {
		   		'Name' => 'EchaEquipos usuarios Instance',
		   		'Environment' => 'vagrant-sandbox'
		   		}
			# Credentials to login to EC2 Instance
			override.ssh.username = "ubuntu"
			override.ssh.private_key_path = ENV['AWS_PRIVATE_KEY_PATH']


  		end

		#Provisioners configuration
		usuarios.vm.provision :shell, :path => "script_python.sh"
		usuarios.vm.provision :ansible do |ansible|
		ansible.playbook = "playbook.yml"
		#ansible.verbose = "v"
		#ansible.host_key_checking = false
		# Disable default limit to connect to all the machines
		#ansible.limit = 'all'

		end
	end

	config.vm.define :estadisticas do |estadisticas|
 		estadisticas.vm.host_name = "estadisticas"

  		config.vm.provider :aws do |aws, override|
			aws.access_key_id = ENV['AWS_ACCESS_KEY_ID']
			aws.secret_access_key = ENV['AWS_SECRET_ACCESS_KEY']
			aws.region = "us-east-1"

			# AMI from which we'll launch EC2 Instance
			aws.ami =  "ami-efe09bf8" # Ubuntu 16.04.1
			aws.keypair_name = ENV['AWS_KEY_PAIR_NAME']
			aws.instance_type = "t2.micro"
			aws.security_groups = ENV['AWS_SECURITY_GROUP_NAME']
			aws.tags = {
		   		'Name' => 'EchaEquipos estadisticas Instance',
		   		'Environment' => 'vagrant-sandbox'
		   		}
			# Credentials to login to EC2 Instance
			override.ssh.username = "ubuntu"
			override.ssh.private_key_path = ENV['AWS_PRIVATE_KEY_PATH']


  		end

		#Provisioners configuration
		estadisticas.vm.provision :shell, :path => "script_python.sh"
		estadisticas.vm.provision :ansible do |ansible|
		ansible.playbook = "playbook.yml"
		#ansible.verbose = "v"
		#ansible.host_key_checking = false
		# Disable default limit to connect to all the machines
		#ansible.limit = 'all'

		end
	end

	config.vm.define :postgres do |postgres|
 		postgres.vm.host_name = "postgres"

  		config.vm.provider :aws do |aws, override|
			aws.access_key_id = ENV['AWS_ACCESS_KEY_ID']
			aws.secret_access_key = ENV['AWS_SECRET_ACCESS_KEY']
			aws.region = "us-east-1"

			# AMI from which we'll launch EC2 Instance
			aws.ami =  "ami-efe09bf8" # Ubuntu 16.04.1
			aws.keypair_name = ENV['AWS_KEY_PAIR_NAME']
			aws.instance_type = "t2.micro"
			aws.security_groups = ENV['AWS_SECURITY_GROUP_NAME']
			aws.tags = {
		   		'Name' => 'EchaEquipos postgres Instance',
		   		'Environment' => 'vagrant-sandbox'
		   		}
			# Credentials to login to EC2 Instance
			override.ssh.username = "ubuntu"
			override.ssh.private_key_path = ENV['AWS_PRIVATE_KEY_PATH']


  		end

		#Provisioners configuration
		postgres.vm.provision :shell, :path => "script_python.sh"
		postgres.vm.provision :ansible do |ansible|
		ansible.playbook = "playbook_postgres.yml"
		#ansible.verbose = "v"
		#ansible.host_key_checking = false
		# Disable default limit to connect to all the machines
		#ansible.limit = 'all'

		end
	end
end
